<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://microsoft.github.io/react-native-windows/blog</id>
    <title>React Native for Windows Blog</title>
    <updated>2022-07-29T06:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://microsoft.github.io/react-native-windows/blog"/>
    <subtitle>The best place to stay up-to-date with the latest React Native for Windows news and events.</subtitle>
    <logo>https://microsoft.github.io/react-native-windows/img/header_logo.svg</logo>
    <entry>
        <title type="html"><![CDATA[Streamlining app creation with React Native for Windows CoreApp]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2022/07/29/coreapp.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2022/07/29/coreapp.html"/>
        <updated>2022-07-29T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head> <meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/steamline-coreapp-windows/"> </head></p> <p>React Native builds on top of the native platform for every OS it runs on; on Windows, this translates to producing a Universal Windows Platform (UWP) app.</p> <p>We heard from some of our customers that build times for these types of apps can be pretty ...</p>]]></summary>
        <author>
            <name>Alexander Sklar</name>
            <uri>https://twitter.com/alexsklar</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Native for Windows is helping Settings improve more quickly]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2022/02/11/settings.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2022/02/11/settings.html"/>
        <updated>2022-02-11T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/rnw-settings-win11/" />
</head></p>
<p>React Native isnâ€™t just for mobile! Check out how the Windows 11 Settings app is leveraging React Native for Windows to deliver new features and capabilities to users faster and with the same great visual fidelity as Windows 11.</p>
<p>In this blog post, we discuss how and why Microsoft is using React Native for Windows to deliver the Your Microsoft Account page in Windows 11 Settings.</p>
]]></summary>
        <author>
            <name>Steven Moyes, Alexander Sklar</name>
            <uri>https://twitter.com/ReactNativeMSFT</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Calling Windows APIs from React Native just got easier]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2022/02/11/rnwinrt.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2022/02/11/rnwinrt.html"/>
        <updated>2022-02-11T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/announcing-rnwinrt/" />
</head></p>
<p>We are excited to announce the <a href="http://aka.ms/reactnativewinrt">React Native WinRT</a> project, a new extension that makes it easier for <a href="https://microsoft.github.io/react-native-windows/">React Native for Windows</a> developers to call Windows Runtime APIs directly from JavaScript! With React Native WinRT, developers can light up experiences that take advantage of unique platform features on Windows.</p>
<p>In this blog post, we will dive a little deeper into the technology, walk through some sample code, and show how React Native WinRT is already in use today.</p>
<p>The <a href="https://github.com/microsoft/react-native-winrt">React Native WinRT repo</a> is now public, and a preview is available for developers to get started!</p>
]]></summary>
        <author>
            <name>Angela Zhang</name>
            <uri>https://twitter.com/angelazhangg</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Use Win32 features from a React Native for Windows application]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2021/08/05/win32component.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2021/08/05/win32component.html"/>
        <updated>2021-08-05T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/win32component/" />
</head></p>
<p>If you have adopted React Native to build your Windows applications, you'll know that the final output is a <a href="https://docs.microsoft.com/windows/uwp/get-started/universal-application-platform-guide">Universal Windows Platform application</a>. This development platform gives you access to all the latest enhancements in the Windows ecosystem (modern UI platform, notifications, integration with features like inking and Windows Hello, etc.), plus greater security and reliability thanks to the sandbox the application runs in.
However, there might be scenarios where UWP isn't enough and you need to perform one or more tasks which are supported only by the Win32 ecosystem: working with any file on the disk without user intervention, reading a key from the registry, integrating a SDK which doesn't support the Windows Runtime.</p>
<p>In this post we're going to explore a solution that will enable you to get the best of both worlds: a React Native for Windows application which integrates a classic Win32 process. We're going to build a sample React Native application which will be able to read a registry key and display it. The goal is to display to the user values stored in the <code>\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion</code> hive, which contains many information about the currently installed version of Windows.</p>
]]></summary>
        <author>
            <name>Matteo Pagani</name>
            <uri>https://twitter.com/qmatteoq</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Add Toast notifications to your React Native for Windows application]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2021/06/30/notifications.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2021/06/30/notifications.html"/>
        <updated>2021-06-30T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/react-native-windows-notifications/" />
</head></p>
<p>In this article, we will discuss how to enable your app to show toast notifications, which you can use to notify the user that something needs their attention, or to notify them that a long running operation has completed.</p>
]]></summary>
        <author>
            <name>Alexander Sklar</name>
            <uri>https://twitter.com/alexsklar</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Add inking to your React Native for Windows application]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2021/05/25/inking.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2021/05/25/inking.html"/>
        <updated>2021-05-25T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/rnw-inking/" />
</head></p>
<p>Windows 10 is one of the most powerful platforms on the market when it comes to supporting digital inking experiences. As such, the Universal Windows Platform comes with a dedicated series of controls that you can add to your application to enable inking experiences. Thanks to these controls, you can easily implements features like capturing signatures, text and shape recognition, etc.</p>
<p>If you're building a Windows application with React Native, there are a few options you can explore to add such a feature. One of them is using a community module called <a href="https://github.com/creambyemute/react-native-sketch-canvas">react-native-sketch-canvas</a>, which provides a Windows implementation as well. This module is based on Win2D and it enables the recording and playback of ink strokes. While this solution can be a great fit for many applications, there are scenarios in which you need more precision and better integration with the Windows ecosystem, like when you need to capture a signature. For these purposes, Windows 10 offers a native control called <a href="https://docs.microsoft.com/uwp/api/Windows.UI.Xaml.Controls.InkCanvas"><code>InkCanvas</code></a>, which enables powerful inking experiences. <code>InkCanvas</code> is specifically a Windows control and isn't exposed automatically by React Native. As such, we'll have to wrap it with a <a href="https://microsoft.github.io/react-native-windows/docs/view-managers">native UI component</a>, which is a feature provided by React Native which exposes native UI controls for Windows, Android or iOS to the JavaScript layer using JSX.</p>
<p>In this article we'll walk through the process of wrapping the <code>InkCanvas</code> control, with the dual goals of enabling your apps to support inking and walking you through the process of creating a native UI component, which can be useful for exposing other native controls.</p>
]]></summary>
        <author>
            <name>Matteo Pagani</name>
            <uri>https://twitter.com/qmatteoq</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using CodePush in a React Native for Windows application]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2021/05/17/codepush.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2021/05/17/codepush.html"/>
        <updated>2021-05-17T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/rnw-codepush/" />
</head></p>
<p>CodePush is a service built by Microsoft, now incorporated into the <a href="https://appcenter.ms/">Visual Studio App Center platform</a>, which provides a way for React Native and Cordova developers to be more agile in delivering updates to their applications.
Thanks to CodePush, you are able to deliver a new bundle (which might contain updated JavaScript files, new images, etc.) without having to fully redeploy a new package. This means, for example, that you can update the content of your application published on a Store without submitting a new package and waiting for the certification process to be completed; or that you can add a new feature in your LOB app without having to redeploy it via Intune or another MDM solution to all your employees.</p>
]]></summary>
        <author>
            <name>Matteo Pagani</name>
            <uri>https://twitter.com/ReactNativeMSFT</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gallery App, TurboModules, and more community modules]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2021/03/16/64updates.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2021/03/16/64updates.html"/>
        <updated>2021-03-16T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/2021-03-16-64updates/" />
</head></p>
<p>React Native 0.64 is out! Which means it's time to showcase all the work we've put in around supporting more community modules, TurboModules, APIs improvements, and even some tools, all in the effort to improve the developer experience.</p>
]]></summary>
        <author>
            <name>Kiki Saintonge, Harini Kannan, Steven Moyes</name>
            <uri>https://twitter.com/ReactNativeMSFT</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows & macOS version 0.63 updates, Hermes, and more]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2020/09/02/63updates.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2020/09/02/63updates.html"/>
        <updated>2020-09-02T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/2020-09-02-rnw-63updates/" />
</head></p>
<p>React Native for Windows is now on a <a href="https://www.npmjs.com/package/react-native-windows">0.63</a> stable release with React Native core, lighting up some fun new APIs.</p>
]]></summary>
        <author>
            <name>Kiki Saintonge, Harini Kannan, Steven Moyes</name>
            <uri>https://twitter.com/ReactNativeMSFT</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fast refresh and more on Windows with 0.62 release]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2020/07/22/62updates.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2020/07/22/62updates.html"/>
        <updated>2020-07-22T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/2020-07-22-rnw-62updates/" />
</head></p>
<p>React Native for Windows released latest stable <a href="https://www.npmjs.com/package/react-native-windows/v/0.62.2">0.62.2</a> with Fast Refresh, RTL support, RedBox and thread safe property storage APIs.</p>
]]></summary>
        <author>
            <name>Harini Kannan</name>
            <uri>https://twitter.com/ReactNativeMSFT</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Build 2020 Recap]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2020/06/01/build2020recap.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2020/06/01/build2020recap.html"/>
        <updated>2020-06-01T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head> <meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/2020-06-01-build2020recap/"> </head></p> <p>At the end of May 2020, Microsoft wrapped up the annual <a href="https://mybuild.microsoft.com/">Build developer conference</a>. React Native was a big theme at Build 2020 this year, with over 6 sessions dedicated to React Native and many tie-ins from other talks.</p> <p>The biggest announcement fr...</p>]]></summary>
        <author>
            <name>Steven Moyes</name>
            <uri>http://twitter.com/moyessa</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing React Native for macOS and more]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2020/05/19/rn4mupdadates.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2020/05/19/rn4mupdadates.html"/>
        <updated>2020-05-19T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/2020-05-19-rn4m-updates/" />
</head></p>
<p>We're excited to announce our first preview release aligning with <a href="https://reactnative.dev/blog/2020/03/26/version-0.62">React Native 0.62</a>!</p>
]]></summary>
        <author>
            <name>Kiki Saintonge</name>
            <uri>http://twitter.com/KikiSaintonge</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keeping Up with React Native Core]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2020/02/010/m4updates.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2020/02/010/m4updates.html"/>
        <updated>1970-01-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/2020-02-10-m4updates/" />
</head></p>
<p>Announcing React Native for Windows v0.61, now on the high performance common core across iOS and Android!</p>
]]></summary>
        <author>
            <name>Kiki Saintonge</name>
            <uri>http://twitter.com/KikiSaintonge</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Upgrading with Hermes Support and Automated Tests]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2019/12/3/m3updates.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2019/12/3/m3updates.html"/>
        <updated>1970-01-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/2019-12-03-m3updates/" />
</head></p>
<p>We wrapped up <a href="https://github.com/microsoft/react-native-windows/milestone/17">Milestone 3</a> a month ago which included <strong>upgrade to support React Native version 0.60, Native extensions developer story, integration with the new high performance JS engine- Hermes, E2E test infrastructure and a host of added API support</strong>. Some detailed highlights from the past few months are shared below.</p>
]]></summary>
        <author>
            <name>React Native at Microsoft</name>
            <uri>http://twitter.com/reactnativemsft</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Roadmap for vnext]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2019/07/22/roadmap.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2019/07/22/roadmap.html"/>
        <updated>2019-07-22T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/2019-07-22-rnw-roadmap/" />
</head></p>
<p>This document outlines some context and prospective roadmap for React Native for Windows. This project is under active development by the Microsoft Developer Platform team in collaboration with Office, Xbox and other partners as well as the wider React Native community. This roadmap is not meant to be exhaustive or guaranteed since we are also keeping up with the evolving <a href="http://facebook.github.io/react-native/">facebook\react-native</a> project and the needs of the React Native community.</p>
]]></summary>
        <author>
            <name>React Native at Microsoft</name>
            <uri>http://twitter.com/reactnativemsft</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[July 2019 Updates]]></title>
        <id>https://microsoft.github.io/react-native-windows/blog/2019/07/21/updates.html</id>
        <link href="https://microsoft.github.io/react-native-windows/blog/2019/07/21/updates.html"/>
        <updated>2019-07-21T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><head>
<meta http-equiv="Refresh" content="0; URL=https://devblogs.microsoft.com/react-native/2019-07-21-rnw-updates/" />
</head></p>
<p>Over the past couple of months and spread across several contributors from Microsoft, we have completed <a href="https://github.com/microsoft/react-native-windows/milestone/16">Milestone 2</a> for React Native for Windows. This blog post covers the highlights of the release.</p>
]]></summary>
        <author>
            <name>React Native at Microsoft</name>
            <uri>http://twitter.com/reactnativemsft</uri>
        </author>
    </entry>
</feed>